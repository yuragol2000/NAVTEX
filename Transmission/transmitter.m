% Файл кодирования и модулироввния текста 
%> @file transmitter.m
% =========================================================================
% Используемые файлы: Coder.m (Функция кодирования в режиме CBSS).
% Используемые файлы: Modulation.m (Функция модулирования сигнала).
% Используемые файлы: CoderSBSS.m (Функция кодирования в режиме SBSS).
% =========================================================================

clc
clear all

% =========================================================================
% Начальные константы
% =========================================================================

FsFd = 40;                  % Отношение Fs/Fd (чатота дескритизации/символьная скорость)
Num_of_station = '1234';    % Идентификационный номер принемающей станции

filename = '..\TEXT\text.txt'; % Передаваемый Message

% =========================================================================
% Считывание текста из файла
% =========================================================================

f = fopen(filename);
[text, n] = fscanf(f,'%c');
fclose(f);

% =========================================================================
% Кодирование для CBSS или SBSS
% =========================================================================

%binarycode = Coder(text);                       % Кодирование сигнала в циркулярном режиме(CBSS)
binarycode = CoderSBSS(text,Num_of_station);   % Кодирование сигнала в избирательном режиме(SBSS)

% =========================================================================
% Модуляция сигнала
% =========================================================================

s_fsk = Modulation(binarycode,FsFd);

% =========================================================================
% % Сохранение модулированного сигнала
% =========================================================================

filename = '..\TEXT\Modulated.wav';
Fs = 48000;

audiowrite(filename,s_fsk,Fs);

%% Проверка

% fs  = 4000;
% m = length(s_fsk);       % original sample length
% n = pow2(nextpow2(m));  % transform length
% y = fft(s_fsk,n);        % DFT of signal
% 
% f = (0:n-1)*(fs/n);
% power = abs(y).^2/n;      
% 
% plot(f(1:floor(n/2)),power(1:floor(n/2)))
% xlabel('Frequency')
% ylabel('Power')

